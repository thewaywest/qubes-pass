#!/bin/bash

usage() {
  echo ""
  echo "  qubes-pass.ManageKeys <command> [<arguments>]"
  echo ""
  echo "  Process commands and arguments for the 'pass' password manager on a"
  echo "  pass vm. This command is rarely accessed directly; it is called via"
  echo "  the qubes-rpc scripts installed on any app vm that calls qubes-pass."
  echo ""
  echo "  The actions handled in ManageKeys are called separately from those in"
  echo "  the ReadKeys file, allowing separation of access for multiple users"
  echo "  and roles."
  echo ""
  echo "  Access to pass service qubes is maintained in qubes-pass.ManageKeys,"
  echo "  located in the /etc/qubes-rpc directory of Dom0"
  echo ""
}

set -e

# decode command and optional arguments
read -a 4096 args
cmd=$(echo "${args[0]}" | base64 -d)

case "$cmd" in

  init) # generate a new password store on a pass vm

    # test for configured folder, exit if found
    if test -f "$HOME"/.password-store/.gpg-id ; then
        key=$(cat "$HOME"/.password-store/.gpg-id)
        echo "Init ignored: password store already exists using GPG key $key." >&2
        exit 8
    fi

    # parse parameters
    uname=${args[1]:-Pass Store}
    email=${args[2]:-noreply@passwordstore.org}
    
    # generate a gpg key for the new repository
    tmp=$(mktemp) && trap 'rm -f "$tmp"' EXIT
  cat > "$tmp" <<EOF
Key-Type: RSA
Key-Length: 4096
Name-Real: $uname
Name-Email: $email
Expire-Date: 0
EOF
    # return if key creation fails
    ret=0 ; out=$(gpg2 --batch --gen-key "$tmp" 2>&1) || ret=$?
    if [ "$ret" != "0" ] ; then
        echo "$out" >&2
        exit "$ret"
    fi
    
    # notify user and provide beginner's instructions
    key=$(echo "$out" | awk '/gpg: key .* marked as ultimately trusted/ { print $3 }')
    pass init "$key"
    echo "Do not forget to back up your password store regularly." >&2
    echo "To back up your password store, back up the entire $HOSTNAME VM using Qubes backup." >&2
    echo "Key files to backup: $HOME/.password-store and $HOME/.gnupg2" >&2

  get-or-generate | getg) # get a key or generate if not found

    # parse parameters
    entry=$(echo "${args[0]}" | base64 -d)
    nosymbols=$(echo "${ars[1]}" | base64 -d)
    passphrase=$(echo "${args[2]}" | base64 -d)
    totp=$(echo "${args[3]}" | base64 -d)

    # query pass key
    ret=0 ; out=$(pass -- "$entry" 2>&1) || ret=$?

    # create new key where one does not exist
    if [ "$ret" == "1" ] && echo "$out" | grep -q "not in the password store" ; then
        logger -t qubes-pass.ManageKeys "creating password entry $entry"
        ret=0

        if [ "passphrase" != "0" ] ; then
            out=$(passphraseme $passphrase) || ret=$?
        elif [ "$nosymbols" == "1" ] ; then
            out=$(pass generate -n -- "$entry" 32) || ret=$?
        else
            out=$(pass generate -- "$entry" 32) || ret=$?
        fi

        if [ "$ret" == "1" ] ; then
            echo "Password generation failed: $out"
            exit "$ret"
        fi

    # if key exists, return contents
    elif [ "$ret" != "0" ] ; then
        echo "$out" >&2
        exit "$ret"
    fi
    
    logger -t qubes-pass.ManageKeys "requested password entry $entry"
    exec pass -- "$entry"
esac

# insert a new entry
elif [ "$cmd" == "insert" ] ; then
  read -n 4096 entry
  read -n 4096 multiline
  read -n 1048576 contents
  entry=$(echo "$entry" | base64 -d)
  multiline=$(echo "$multiline" | base64 -d)
  contents=$(echo "$contents")

  logger -t ruddo.PassManage "creating password entry $entry"

  if [ "$multiline" == "1" ] ; then
      echo "$contents" | base64 -d | pass insert --multiline --force -- "$entry"
  else
      echo "$contents" | base64 -d | pass insert -e --force -- "$entry"
  fi

# delete an entry
elif [ "$cmd" == "rm" ] ; then
  read -n 4096 entry
  entry=$(echo "$entry" | base64 -d)

  logger -t ruddo.PassManage "removing password entry $entry"

  pass rm -- "$entry"

# copy or move an entry
elif [ "$cmd" == "mv" -o "$cmd" == "cp" ] ; then
  read -n 4096 entry
  read -n 4096 newentry
  read -n 4096 force
  entry=$(echo "$entry" | base64 -d)
  newentry=$(echo "$newentry" | base64 -d)
  force=$(echo "$force" | base64 -d)

  if [ "$force" == "1" ] ; then
      cmd=$cmd + " -f"
  fi

  logger -t ruddo.PassManage "$cmd password entry $entry to $entry"

  pass "$cmd" $f -- "$entry" "$newentry"

fi
